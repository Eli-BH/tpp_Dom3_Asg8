{"version":3,"sources":["components/Cols.js","components/Rows.js","App.js","serviceWorker.js","index.js"],"names":["Cols","props","ac","allColor","style","draggable","onDragStart","colorToggle","onDragOver","id","Rows","cols","cellColorChange","i","colAmt","push","bgColor","App","colorSelect","event","setState","target","value","changeColor","backgroundColor","state","toggleAll","currColor","tableRow","tableCol","handleRows","bind","handleCols","handleDecRows","handleDecCols","this","cellStyle","clearStyle","rows","console","log","className","onClick","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0631094c.chunk.js","sourcesContent":["import React from 'react'; \r\n\r\n//Table cell acts as the columns (row additions - horizontal)\r\nconst  Cols = (props) =>{\r\n     //ac acts as the toggle to change the color of all or just the selected cell\r\n        const ac = (props.allColor) ? props.style: null\r\n//props.colorToggle toggles the colorchange function on App.js\r\n    return <td\r\n            draggable = 'true'\r\n            onDragStart={props.colorToggle}\r\n            onDragOver = {props.colorToggle}\r\n            id = \"cell\"\r\n            style = {ac}>\r\n           </td>  \r\n}\r\n\r\nexport default Cols; ","import React from 'react'\r\nimport './cellsStyle.css'\r\nimport Cols from './Cols.js';\r\n\r\n\r\n\r\n//rows function takes the state of from app and \r\n//creates an array of <tableCell> which is the columns (row additions - horizontal)\r\n//and returns copies the vertical columns of the horizontal lines\r\n//props are the ammoint of rows (horizontal elements) \r\nconst Rows = (props) =>{\r\n    let cols = []; \r\n    let cellColorChange = props.colorToggle;\r\n    for(let i = 0; i < props.colAmt; i++){\r\n        cols.push(<Cols allColor ={props.allColor}  style = {props.style} colorToggle = {cellColorChange} bgColor = {props.bgColor}/>)\r\n    }\r\n//return a cols number of  rows of the colomns\r\n    return (\r\n        <tr>{cols}</tr>\r\n    )\r\n}\r\n\r\nexport default Rows\r\n","import React from 'react';\nimport './App.css';\nimport Rows from './components/Rows.js'\n\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n      currColor: '', \n      tableRow: 1,\n      tableCol: 1,\n      bgColor: 'black',\n      allColor: false \n    }\n    //handelers to add and remove rows and columns\n\n    this.handleRows = this.handleRows.bind(this);\n    this.handleCols = this.handleCols.bind(this);\n    this.handleDecRows = this.handleDecRows.bind(this);\n    this.handleDecCols = this.handleDecCols.bind(this);\n    this.toggleAll = this.toggleAll.bind(this);\n  }\n\n//adds rows\n  handleRows(){\n    this.setState(\n      {tableRow: this.state.tableRow + 1}\n    );\n  }\n//decreases rows\n  handleDecRows(){\n    this.setState(\n      {tableRow: this.state.tableRow - 1}\n    );\n  }\n//adds columns \n  handleCols(){\n    this.setState(\n      {tableCol: this.state.tableCol + 1}\n    );\n  }\n//decrements columns \n  handleDecCols(){\n    this.setState(\n      {tableCol: this.state.tableCol - 1}\n    );\n  }\n//function to select a color\n  colorSelect = (event) =>{\n    this.setState(\n      {bgColor: event.target.value}\n    );\n  }\n  //function to change to the selected color\n  changeColor = (event) => {\n    event.target.style.backgroundColor = this.state.bgColor \n  }\n  //function toggles the all color state, which decides if full colored cells are\n  //rendered as opposed to the individually colored cells\n  toggleAll = () =>{\n    if(this.state.allColor == true){\n      this.setState({allColor:false});\n    } else {\n      this.setState({allColor:true});\n    }\n  }\n\n  render(){\n    //toggles cell background color on render\n    const cellStyle = {\n      backgroundColor: this.state.bgColor\n    }\n    //toggles background color off render\n    const clearStyle ={\n      backgroundColor: null\n    }\n    const rows = []; \n\n     for(let i = 0; i < this.state.tableRow; i++){\n       (this.state.allColor) ?\n          rows.push(<Rows \n          style={ cellStyle}  \n          allColor={this.state.allColor} \n          colAmt = {this.state.tableCol} \n          colorToggle={this.changeColor} \n          bgColor={this.bgColor}/>) :\n          rows.push(<Rows \n            style={\n              clearStyle\n            } \n            allColor={this.state.allColor} \n            colAmt = {this.state.tableCol} \n            colorToggle={this.changeColor} \n            bgColor={this.bgColor}/>)\n\n     };\n\n     console.log(this.state.bgColor);\n\n    return(\n      <div className ='wrapper'>\n        <div className = 'heading'>\n          <h1>React Dom 3</h1> \n        </div>\n        <hr />\n        <div className = 'buttons'>\n          <button className =\"btn\" onClick={() => this.handleRows()}>Add rows</button> \n          <button className =\"btn\" onClick={() => this.handleCols()}>Add cols</button>\n          <button className =\"btn\" onClick={() => this.handleDecRows()}>Remove rows</button>\n          <button className =\"btn\" onClick={() => this.handleDecCols()}>Remove cols</button>\n          <button className =\"btn\" onClick={() => this.toggleAll()}>Toggle All</button>\n           <select className =\"btn\" onChange = {this.colorSelect}>\n             <option value='#000000'>Black</option>\n             <option value='#A0522D'>Brown</option>\n             <option value='#B22222'>Red</option>\n             <option value='#FF8C00'>Orange</option>\n             <option value='#FFFF33'>Yellow</option>\n             <option value='#008000'>Green</option>\n             <option value='#4169E1'>Blue</option>\n             <option value='#9400D3'>Purple</option>\n             <option value='#808080'>Grey</option>\n             <option value='#FF0080'>Fuschia</option>\n             <option value='#FFFFF0'>Ivory</option>  \n          </select>\n\n        </div>\n\n          <h1 className ='indic'>Rows: {this.state.tableRow} Columns: {this.state.tableCol}</h1>\n          <h3 className ='indic'>Click and drag over a cell to 'paint' </h3>\n          <table>\n            {rows}\n          </table>\n\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}